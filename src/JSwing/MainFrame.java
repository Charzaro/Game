/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JSwing;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.util.HashMap;

import game.GameArea;

/** MainFrame.java
 *
 * @author Damon Ball
 */
public class MainFrame extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;
	// dimensions of the window
	private Dimension windowDim;
	// dimensions of the game screen
	private Dimension playAreaSize;
	
	protected GameArea ga;
	protected MenuPanel mp;
	
    /**
     * Creates new form NewJFrame
     */
    public MainFrame() {
    	
    	windowDim = new Dimension();
    	
    	// get window dimensions from screen resolution minus the borders and taskbar
    	Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    	Insets insets = Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
    	windowDim.width = (int)screenSize.getWidth() - insets.right - insets.left;
    	windowDim.height = (int)screenSize.getHeight() - insets.bottom;

    	setPreferredSize(windowDim);
    	pack();

    	// initialize UI elements
        initComponents();
        myInitComponents();
        
        addComponentListener(new ComponentListener() {
            public void componentResized(ComponentEvent e) {
            	resize();
            }

			@Override
			public void componentMoved(ComponentEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void componentShown(ComponentEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void componentHidden(ComponentEvent e) {
				// TODO Auto-generated method stub
				
			}
        });
    }
    
    private void myInitComponents(){
    	
    	// get resulting dimensions of content area
    	playAreaSize = getContentPane().getSize();
    	
    	// create game area
    	ga = new GameArea(this, (int)playAreaSize.getWidth(), (int)playAreaSize.getHeight());
    	// create Menu screens
    	mp = new MenuPanel(this, (int)playAreaSize.getWidth(), (int)playAreaSize.getHeight());
    	
    	// start with game area active in UI
    	add(ga, BorderLayout.CENTER);   	
    	pack();
    	printRes();
    }
    
    // prints dimensions
    public void printRes(){
    	System.out.println("Game Area;");
    	System.out.format("%f by %f resulotion.%n", playAreaSize.getWidth(), playAreaSize.getHeight());
    	
    	System.out.println("Screen");
    	System.out.format("%f by %f resulotion.%n", windowDim.getWidth(), windowDim.getHeight());
    }
    
    // switches UI to menu
    public void openMenu(){
    	remove(ga);
    	add(mp);
    	mp.requestFocusInWindow();
    	pack();
    	repaint();
    }
    
    // switches UI to game
    public void openGame(){
    	remove(mp);
    	add(ga);
    	ga.requestFocusInWindow();
    	pack();
    	repaint();
    	ga.play();
    }
    
    public void setAbilities(short p1Abil1Chosen, short p1Abil2Chosen, short p2Abil1Chosen, short p2Abil2Chosen){
    	ga.p1.setAbilities(p1Abil1Chosen, p1Abil2Chosen);
    	ga.p2.setAbilities(p2Abil1Chosen, p2Abil2Chosen);
    	ga.resetGame();
    }
    
    public HashMap<String, Integer> getP1Keybinds(){
    	return ga.p1.getKeys();
    }
    
    public HashMap<String, Integer> getP2Keybinds(){
    	return ga.p2.getKeys();
    }
    
    public void setKeys(short p, HashMap<String, Integer> newKeys){
    	if(p == 1){
    		ga.p1.getKeyPresses().setKeys(newKeys);
    	}
    	else if(p == 2){
    		ga.p2.getKeyPresses().setKeys(newKeys);
    	}
    	else{
    		System.err.println("Player does not exist.");
    	}
    }
    
    private void resize(){
    	windowDim = this.getSize();
    	// get resulting dimensions of content area
    	playAreaSize = getContentPane().getSize();
    	ga.changeDimensions((int)(playAreaSize.getWidth()), (int)(playAreaSize.getHeight()));
    	repaint();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
